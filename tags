!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	client.c	31;"	d	file:
BUFFER_SIZE	server.c	30;"	d	file:
CL_DEBUG_0	debug.h	115;"	d
CL_DEBUG_0	debug.h	144;"	d
CL_DEBUG_1	debug.h	116;"	d
CL_DEBUG_1	debug.h	145;"	d
CL_DEBUG_2	debug.h	117;"	d
CL_DEBUG_2	debug.h	146;"	d
CL_DEBUG_BEGIN	debug.h	216;"	d
CL_DEBUG_BEGIN	debug.h	220;"	d
CL_DEBUG_END	debug.h	218;"	d
CL_DEBUG_END	debug.h	222;"	d
CL_DEBUG_INCLUDES_CF	debug.h	136;"	d
CL_DEBUG_PRINT	debug.h	217;"	d
CL_DEBUG_PRINT	debug.h	221;"	d
CL_LOG	debug.h	201;"	d
CL_LOG_CLOSE	debug.h	204;"	d
CL_LOG_OPEN	debug.h	193;"	d
CL_PLUGIN_DEBUG	debug.h	126;"	d
CL_UNIT_TESTING	debug.h	121;"	d
CL_UNIT_TESTING	debug.h	147;"	d
CONSTANT	traff_gen.h	/^  CONSTANT=1,$/;"	e	enum:model_type
EXPONENTIAL	traff_gen.h	/^  EXPONENTIAL,$/;"	e	enum:model_type
INDEPENDENT	traff_gen.h	/^  INDEPENDENT,$/;"	e	enum:traffic_mode
LOG	debug.h	229;"	d
LOG0	debug.h	235;"	d
LOG_CF	debug.c	/^void LOG_CF(const char *cs, CFStringRef theStr) $/;"	f	signature:(const char *cs, CFStringRef theStr)
LOG_CF	debug.h	/^    inline void LOG_CF(const char *cs, CFStringRef theStr) $/;"	f	signature:(const char *cs, CFStringRef theStr)
LOG_CF	debug.h	/^    void LOG_CF(const char *cs, CFStringRef theStr);$/;"	p	signature:(const char *cs, CFStringRef theStr)
LOG_CF	debug.h	264;"	d
LOG_NS	debug.h	242;"	d
LOG_NS	debug.h	247;"	d
NDEBUG	debug.h	153;"	d
NS_BLOCK_ASSERTIONS	debug.h	156;"	d
PARETO	traff_gen.h	/^  PARETO,$/;"	e	enum:model_type
PIPELINE	traff_gen.h	/^  PIPELINE=1,$/;"	e	enum:traffic_mode
PORT_NO	traff_gen.h	19;"	d
USING_COREFOUNDATION	debug.h	140;"	d
WINDOW_SIZE	client.c	32;"	d	file:
__anon1::logfile	debug.h	/^    FILE *logfile;$/;"	m	struct:__anon1	access:public
__anon1::logfile_path	debug.h	/^    char logfile_path[1024];$/;"	m	struct:__anon1	access:public
_cl_debug_h_	debug.h	32;"	d
accept_cb	server.c	/^accept_cb(struct ev_loop *loop, struct ev_io *w, int revents) {$/;"	f	signature:(struct ev_loop *loop, struct ev_io *w, int revents)
accept_cb	server.c	/^void accept_cb(struct ev_loop *loop, struct ev_io *watcher, int revents);$/;"	p	file:	signature:(struct ev_loop *loop, struct ev_io *watcher, int revents)
alpha	traff_gen.h	/^  double alpha;$/;"	m	struct:pareto	access:public
buffer	server.c	/^char buffer[BUFFER_SIZE];$/;"	v
cl_debug_info	debug.h	/^} cl_debug_info;$/;"	t	typeref:struct:__anon1
cl_debug_init	debug.c	/^void cl_debug_init(const char *inLogFilePath)$/;"	f	signature:(const char *inLogFilePath)
cl_debug_init	debug.h	/^void cl_debug_init(const char *inLogFilePath);$/;"	p	signature:(const char *inLogFilePath)
cl_debug_trace	debug.h	212;"	d
cl_debug_trace	debug.h	214;"	d
conns	traff_gen.h	/^  uint32_t conns;$/;"	m	struct:server_stats	access:public
curr_request	traff_gen.h	/^  uint16_t curr_request;$/;"	m	struct:flow	access:public
debug0cocoa	debug.h	288;"	d
debug0cocoa	debug.h	293;"	d
debug0cocoa	debug.h	313;"	d
debug0msg	debug.h	273;"	d
debug0msg	debug.h	311;"	d
debug0msg0	debug.h	280;"	d
debug0msg0	debug.h	312;"	d
debug1cocoa	debug.h	337;"	d
debug1cocoa	debug.h	342;"	d
debug1cocoa	debug.h	348;"	d
debug1msg	debug.h	322;"	d
debug1msg	debug.h	346;"	d
debug1msg0	debug.h	329;"	d
debug1msg0	debug.h	347;"	d
debug2cocoa	debug.h	370;"	d
debug2cocoa	debug.h	375;"	d
debug2cocoa	debug.h	381;"	d
debug2msg	debug.h	355;"	d
debug2msg	debug.h	379;"	d
debug2msg0	debug.h	362;"	d
debug2msg0	debug.h	380;"	d
debug_enter	debug.h	296;"	d
debug_enter	debug.h	314;"	d
debug_exit	debug.h	303;"	d
debug_exit	debug.h	315;"	d
end	traff_gen.h	/^  struct timeval st, end;$/;"	m	struct:flow_stats	typeref:struct:flow_stats::	access:public
flow	traff_gen.h	/^struct flow {$/;"	s
flow::curr_request	traff_gen.h	/^  uint16_t curr_request;$/;"	m	struct:flow	access:public
flow::request_delay	traff_gen.h	/^  double *request_delay;$/;"	m	struct:flow	access:public
flow::requests	traff_gen.h	/^  uint16_t requests;$/;"	m	struct:flow	access:public
flow::size	traff_gen.h	/^  double *size;$/;"	m	struct:flow	access:public
flow_arrival	traff_gen.h	/^  struct model flow_arrival;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
flow_request	client.c	/^flow_request (struct ev_loop *loop, uint16_t port, uint64_t len ) {$/;"	f	signature:(struct ev_loop *loop, uint16_t port, uint64_t len )
flow_stats	traff_gen.h	/^struct flow_stats {$/;"	s
flow_stats::end	traff_gen.h	/^  struct timeval st, end;$/;"	m	struct:flow_stats	typeref:struct:flow_stats::	access:public
flow_stats::request	traff_gen.h	/^  uint64_t request;$/;"	m	struct:flow_stats	access:public
flow_stats::send	traff_gen.h	/^  uint64_t send;$/;"	m	struct:flow_stats	access:public
flow_stats::st	traff_gen.h	/^  struct timeval st, end;$/;"	m	struct:flow_stats	typeref:struct:flow_stats::timeval	access:public
flows	traff_gen.h	/^  uint16_t flows;$/;"	m	struct:traffic_model	access:public
gCLDebugStat	debug.c	/^cl_debug_info gCLDebugStat; \/\/ = {stderr, ""};$/;"	v
get_sample	client.c	/^get_sample(struct model *m, double *r, int len) {$/;"	f	file:	signature:(struct model *m, double *r, int len)
init_traffic_model	client.c	/^init_traffic_model (struct traffic_model *t) {$/;"	f	signature:(struct traffic_model *t)
kOurProductName	server.c	/^const char *kOurProductName = "server";$/;"	v
logfile	debug.h	/^    FILE *logfile;$/;"	m	struct:__anon1	access:public
logfile_path	debug.h	/^    char logfile_path[1024];$/;"	m	struct:__anon1	access:public
main	client.c	/^main() {$/;"	f
main	server.c	/^main() {$/;"	f
mean	traff_gen.h	/^    double mean;$/;"	m	union:model::__anon2	access:public
mean	traff_gen.h	/^  double mean;$/;"	m	struct:pareto	access:public
mode	traff_gen.h	/^  enum traffic_mode mode;$/;"	m	struct:traffic_model	typeref:enum:traffic_model::traffic_mode	access:public
model	traff_gen.h	/^struct model {$/;"	s
model::__anon2::mean	traff_gen.h	/^    double mean;$/;"	m	union:model::__anon2	access:public
model::__anon2::p	traff_gen.h	/^    struct pareto p;$/;"	m	union:model::__anon2	typeref:struct:model::__anon2::pareto	access:public
model::type	traff_gen.h	/^  int type; $/;"	m	struct:model	access:public
model_type	traff_gen.h	/^enum model_type {$/;"	g
p	traff_gen.h	/^    struct pareto p;$/;"	m	union:model::__anon2	typeref:struct:model::__anon2::pareto	access:public
pareto	traff_gen.h	/^struct pareto {$/;"	s
pareto::alpha	traff_gen.h	/^  double alpha;$/;"	m	struct:pareto	access:public
pareto::mean	traff_gen.h	/^  double mean;$/;"	m	struct:pareto	access:public
period_bytes	traff_gen.h	/^  uint64_t period_bytes;$/;"	m	struct:server_stats	access:public
period_finished	traff_gen.h	/^  uint64_t period_finished;$/;"	m	struct:server_stats	access:public
r	client.c	/^gsl_rng * r;$/;"	v
read_cb	client.c	/^read_cb(struct ev_loop *loop, struct ev_io *w, int revents) {$/;"	f	signature:(struct ev_loop *loop, struct ev_io *w, int revents)
read_cb	client.c	/^void read_cb(struct ev_loop *loop, struct ev_io *watcher, int revents);$/;"	p	file:	signature:(struct ev_loop *loop, struct ev_io *watcher, int revents)
read_cb	server.c	/^void read_cb(struct ev_loop *loop, struct ev_io *w, int revents){$/;"	f	signature:(struct ev_loop *loop, struct ev_io *w, int revents)
read_cb	server.c	/^void read_cb(struct ev_loop *loop, struct ev_io *watcher, int revents);$/;"	p	file:	signature:(struct ev_loop *loop, struct ev_io *watcher, int revents)
request	traff_gen.h	/^  uint64_t request;$/;"	m	struct:flow_stats	access:public
request_delay	traff_gen.h	/^  double *request_delay;$/;"	m	struct:flow	access:public
request_delay	traff_gen.h	/^  struct model request_delay;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
request_num	traff_gen.h	/^  struct model request_num;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
request_size	traff_gen.h	/^  struct model request_size;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
requests	traff_gen.h	/^  uint16_t requests;$/;"	m	struct:flow	access:public
send	traff_gen.h	/^  uint64_t send;$/;"	m	struct:flow_stats	access:public
serv	server.c	/^struct server_stats serv;$/;"	v	typeref:struct:server_stats
server_stats	traff_gen.h	/^struct server_stats {$/;"	s
server_stats::conns	traff_gen.h	/^  uint32_t conns;$/;"	m	struct:server_stats	access:public
server_stats::period_bytes	traff_gen.h	/^  uint64_t period_bytes;$/;"	m	struct:server_stats	access:public
server_stats::period_finished	traff_gen.h	/^  uint64_t period_finished;$/;"	m	struct:server_stats	access:public
server_stats::tot_bytes	traff_gen.h	/^  uint64_t tot_bytes;$/;"	m	struct:server_stats	access:public
server_stats::tot_conn	traff_gen.h	/^  uint32_t tot_conn;$/;"	m	struct:server_stats	access:public
size	traff_gen.h	/^  double *size;$/;"	m	struct:flow	access:public
st	traff_gen.h	/^  struct timeval st, end;$/;"	m	struct:flow_stats	typeref:struct:flow_stats::timeval	access:public
stats_cb	server.c	/^static void stats_cb (struct ev_loop *, struct ev_timer *, int); $/;"	p	file:	signature:(struct ev_loop *, struct ev_timer *, int)
stats_cb	server.c	/^stats_cb (struct ev_loop *loop, struct ev_timer *t, int revents) {$/;"	f	file:	signature:(struct ev_loop *loop, struct ev_timer *t, int revents)
time_diff	server.c	/^time_diff (struct timeval *start, struct timeval *end) {$/;"	f	signature:(struct timeval *start, struct timeval *end)
tot_bytes	traff_gen.h	/^  uint64_t tot_bytes;$/;"	m	struct:server_stats	access:public
tot_conn	traff_gen.h	/^  uint32_t tot_conn;$/;"	m	struct:server_stats	access:public
traffic_mode	traff_gen.h	/^enum traffic_mode {$/;"	g
traffic_model	traff_gen.h	/^struct traffic_model {$/;"	s
traffic_model::flow_arrival	traff_gen.h	/^  struct model flow_arrival;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
traffic_model::flows	traff_gen.h	/^  uint16_t flows;$/;"	m	struct:traffic_model	access:public
traffic_model::mode	traff_gen.h	/^  enum traffic_mode mode;$/;"	m	struct:traffic_model	typeref:enum:traffic_model::traffic_mode	access:public
traffic_model::request_delay	traff_gen.h	/^  struct model request_delay;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
traffic_model::request_num	traff_gen.h	/^  struct model request_num;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
traffic_model::request_size	traff_gen.h	/^  struct model request_size;$/;"	m	struct:traffic_model	typeref:struct:traffic_model::model	access:public
type	traff_gen.h	/^  int type; $/;"	m	struct:model	access:public
